import { TauntGenerator } from '@/lib/taunt-generator';

// Mock for document.execCommand
Object.assign(document, {
  execCommand: jest.fn(() => true),
});

describe('TauntGenerator', () => {
  let generator: TauntGenerator;

  beforeEach(() => {
    generator = new TauntGenerator();
    jest.clearAllMocks();
    
    // console.warn„Çí„É¢„ÉÉ„ÇØÂåñ„Åó„Å¶„ÉÜ„Çπ„ÉàÂá∫Âäõ„Çí„ÇØ„É™„Éº„É≥„Å´„Åô„Çã
    jest.spyOn(console, 'warn').mockImplementation(() => {});
    
    // ÂêÑ„ÉÜ„Çπ„ÉàÂâç„Å´„ÇØ„É™„ÉÉ„Éó„Éú„Éº„ÉâAPI„ÇíÂæ©ÂÖÉ
    Object.assign(navigator, {
      clipboard: {
        writeText: jest.fn(() => Promise.resolve()),
      },
    });
  });

  afterEach(() => {
    jest.restoreAllMocks();
  });

  describe('generateTaunt', () => {
    test('Ê≠£„Åó„ÅÑÂΩ¢Âºè„ÅÆÁÖΩ„Çä„Éï„É¨„Éº„Ç∫„ÇíÁîüÊàê„Åô„Çã„Åì„Å®', () => {
      const testDate = new Date('2025-08-07T12:34:56.789Z');
      const testRotations = 1688512943.123456;
      
      const result = generator.generateTaunt(testDate, testRotations);
      
      expect(result).toContain('„ÅÑ„Å§Ôºü');
      expect(result).toContain('2025Âπ¥8Êúà7Êó•');
      expect(result).toContain('ÊôÇ34ÂàÜ56Áßí');
      expect(result).toContain('Âú∞ÁêÉ„Åå');
      expect(result).toContain('ÂõûËª¢„Åó„Åü„Å®„ÅçÔºÅ');
    });

    test('ÊõúÊó•„ÇíÊ≠£„Åó„ÅèÂê´„ÇÄ„Åì„Å®', () => {
      const mondayDate = new Date('2025-08-04T12:00:00.000Z'); 
      const tuesdayDate = new Date('2025-08-05T12:00:00.000Z'); 
      const sundayDate = new Date('2025-08-10T12:00:00.000Z'); 
      
      expect(generator.generateTaunt(mondayDate, 1000)).toContain('ÊõúÊó•');
      expect(generator.generateTaunt(tuesdayDate, 1000)).toContain('ÊõúÊó•');
      expect(generator.generateTaunt(sundayDate, 1000)).toContain('ÊõúÊó•');
    });

    test('ÂõûËª¢Êï∞„ÇíÊï¥Êï∞„Åß„Éï„Ç©„Éº„Éû„ÉÉ„Éà„Åô„Çã„Åì„Å®', () => {
      const testDate = new Date('2025-08-07T12:00:00.000Z');
      const testRotations = 1234567.89;
      
      const result = generator.generateTaunt(testDate, testRotations);
      
      expect(result).toMatch(/1,234,568ÂõûËª¢/);
      expect(result).not.toContain('1,234,567.89');
    });

    test('Áï∞„Å™„ÇãÊó•ÊôÇ„ÅßÁï∞„Å™„Çã„Éï„É¨„Éº„Ç∫„ÇíÁîüÊàê„Åô„Çã„Åì„Å®', () => {
      const date1 = new Date('2025-01-01T00:00:00.000Z');
      const date2 = new Date('2025-12-31T23:59:59.999Z');
      
      const phrase1 = generator.generateTaunt(date1, 1000);
      const phrase2 = generator.generateTaunt(date2, 2000);
      
      expect(phrase1).not.toBe(phrase2);
    });

    test('ÊôÇÂàÜÁßí„ÇíÂê´„ÇÄ„Åì„Å®', () => {
      const testDate = new Date('2025-08-07T00:00:00.000Z');
      const result = generator.generateTaunt(testDate, 1000);
      
      expect(result).toContain('ÊôÇ');
      expect(result).toContain('ÂàÜ');
      expect(result).toContain('Áßí');
    });

    test('ÊúàÊó•„ÇíÂê´„ÇÄ„Åì„Å®', () => {
      const testDate = new Date('2025-01-05T01:02:03.000Z');
      const result = generator.generateTaunt(testDate, 1000);
      
      expect(result).toContain('2025Âπ¥1Êúà5Êó•');
      expect(result).toContain('ÊôÇ2ÂàÜ3Áßí');
    });
  });

  describe('copyToClipboard', () => {
    test('Clipboard API„ÅåÂà©Áî®ÂèØËÉΩ„Å™Â†¥Âêà„Å´Ê≠£Â∏∏„Å´„Ç≥„Éî„Éº„Åô„Çã„Åì„Å®', async () => {
      const testText = '„ÉÜ„Çπ„Éà„ÉÜ„Ç≠„Çπ„Éà';
      (navigator.clipboard.writeText as jest.Mock).mockResolvedValue(undefined);
      
      const result = await generator.copyToClipboard(testText);
      
      expect(result).toBe(true);
      expect(navigator.clipboard.writeText).toHaveBeenCalledWith(testText);
    });

    test('Clipboard API„ÅåÂ§±Êïó„Åó„ÅüÂ†¥Âêà„Å´„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„Çí‰ΩøÁî®„Åô„Çã„Åì„Å®', async () => {
      const testText = '„ÉÜ„Çπ„Éà„ÉÜ„Ç≠„Çπ„Éà';
      (navigator.clipboard.writeText as jest.Mock).mockRejectedValue(new Error('Permission denied'));
      
      // DOM„É°„ÇΩ„ÉÉ„Éâ„ÅÆ„É¢„ÉÉ„ÇØ
      const mockTextarea = {
        value: '',
        style: {},
        focus: jest.fn(),
        select: jest.fn(),
      };
      jest.spyOn(document, 'createElement').mockReturnValue(mockTextarea as any);
      jest.spyOn(document.body, 'appendChild').mockImplementation();
      jest.spyOn(document.body, 'removeChild').mockImplementation();
      (document.execCommand as jest.Mock).mockReturnValue(true);
      
      const result = await generator.copyToClipboard(testText);
      
      expect(result).toBe(true);
      expect(document.createElement).toHaveBeenCalledWith('textarea');
    });

    test('Clipboard API„ÅåÂà©Áî®‰∏çÂèØ„Åß„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇÂ§±Êïó„Åó„ÅüÂ†¥Âêà„Å´false„ÇíËøî„Åô„Åì„Å®', async () => {
      const testText = '„ÉÜ„Çπ„Éà„ÉÜ„Ç≠„Çπ„Éà';
      
      // Clipboard API„ÇíÁÑ°ÂäπÂåñ
      Object.assign(navigator, {
        clipboard: undefined,
      });
      
      // „Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ„ÇÇÂ§±Êïó„Åï„Åõ„Çã
      (document.execCommand as jest.Mock).mockReturnValue(false);
      
      const mockTextarea = {
        value: '',
        style: {},
        focus: jest.fn(),
        select: jest.fn(),
      };
      jest.spyOn(document, 'createElement').mockReturnValue(mockTextarea as any);
      jest.spyOn(document.body, 'appendChild').mockImplementation();
      jest.spyOn(document.body, 'removeChild').mockImplementation();
      
      const result = await generator.copyToClipboard(testText);
      
      expect(result).toBe(false);
    });

    test('Á©∫ÊñáÂ≠óÂàó„Çí„Ç≥„Éî„Éº„Åß„Åç„Çã„Åì„Å®', async () => {
      const testText = '';
      (navigator.clipboard.writeText as jest.Mock).mockResolvedValue(undefined);
      
      const result = await generator.copyToClipboard(testText);
      
      expect(result).toBe(true);
      expect(navigator.clipboard.writeText).toHaveBeenCalledWith('');
    });

    test('Èï∑„ÅÑ„ÉÜ„Ç≠„Çπ„Éà„Çí„Ç≥„Éî„Éº„Åß„Åç„Çã„Åì„Å®', async () => {
      const longText = 'a'.repeat(10000);
      (navigator.clipboard.writeText as jest.Mock).mockResolvedValue(undefined);
      
      const result = await generator.copyToClipboard(longText);
      
      expect(result).toBe(true);
      expect(navigator.clipboard.writeText).toHaveBeenCalledWith(longText);
    });

    test('ÁâπÊÆäÊñáÂ≠ó„ÇíÂê´„ÇÄ„ÉÜ„Ç≠„Çπ„Éà„Çí„Ç≥„Éî„Éº„Åß„Åç„Çã„Åì„Å®', async () => {
      const specialText = 'ÁâπÊÆäÊñáÂ≠ó: üöÄ &lt;&gt; "quotes" \'apostrophe\' \n\r\t';
      (navigator.clipboard.writeText as jest.Mock).mockResolvedValue(undefined);
      
      const result = await generator.copyToClipboard(specialText);
      
      expect(result).toBe(true);
      expect(navigator.clipboard.writeText).toHaveBeenCalledWith(specialText);
    });
  });

  describe('Áµ±Âêà„ÉÜ„Çπ„Éà', () => {
    test('ÁîüÊàê„Å®„Ç≥„Éî„Éº„ÅÆ‰∏ÄÈÄ£„ÅÆÊµÅ„Çå„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åô„Çã„Åì„Å®', async () => {
      const testDate = new Date('2025-08-07T12:34:56.000Z');
      const testRotations = 1234567;
      
      const phrase = generator.generateTaunt(testDate, testRotations);
      
      (navigator.clipboard.writeText as jest.Mock).mockResolvedValue(undefined);
      const copyResult = await generator.copyToClipboard(phrase);
      
      expect(phrase).toContain('„ÅÑ„Å§Ôºü');
      expect(phrase).toContain('2025Âπ¥8Êúà7Êó•');
      expect(copyResult).toBe(true);
      expect(navigator.clipboard.writeText).toHaveBeenCalledWith(phrase);
    });

    test('Ë§áÊï∞Âõû„ÅÆÁîüÊàê„Å®„Ç≥„Éî„Éº„ÅåÊ≠£Â∏∏„Å´Âãï‰Ωú„Åô„Çã„Åì„Å®', async () => {
      const dates = [
        new Date('2025-01-01T00:00:00.000Z'),
        new Date('2025-06-15T12:30:45.000Z'),
        new Date('2025-12-31T23:59:59.000Z'),
      ];
      
      const rotations = [1000000, 2000000, 3000000];
      
      (navigator.clipboard.writeText as jest.Mock).mockResolvedValue(undefined);
      
      for (let i = 0; i < dates.length; i++) {
        const phrase = generator.generateTaunt(dates[i], rotations[i]);
        const copyResult = await generator.copyToClipboard(phrase);
        
        expect(phrase).toContain('„ÅÑ„Å§Ôºü');
        expect(copyResult).toBe(true);
      }
      
      expect(navigator.clipboard.writeText).toHaveBeenCalledTimes(3);
    });
  });

  describe('„Ç®„É©„Éº„Éè„É≥„Éâ„É™„É≥„Ç∞', () => {
    test('„Éï„Ç©„Éº„É´„Éê„ÉÉ„ÇØ‰∏≠„ÅÆ‰æãÂ§ñ„ÇíÈÅ©Âàá„Å´Âá¶ÁêÜ„Åô„Çã„Åì„Å®', async () => {
      const testText = '„ÉÜ„Çπ„Éà„ÉÜ„Ç≠„Çπ„Éà';
      
      // Clipboard API„ÇíÁÑ°ÂäπÂåñ
      Object.assign(navigator, {
        clipboard: undefined,
      });
      
      // document.createElement„Åß‰æãÂ§ñ„ÇíÁô∫Áîü„Åï„Åõ„Çã
      jest.spyOn(document, 'createElement').mockImplementation(() => {
        throw new Error('DOMÊìç‰Ωú„Ç®„É©„Éº');
      });
      
      const result = await generator.copyToClipboard(testText);
      
      expect(result).toBe(false);
    });
  });
});